# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12_accel_sgd.ipynb.

# %% auto 0
__all__ = ['BaseSchedCB', 'BatchSchedCB', 'HasLearnCB', 'RecorderCB', 'EpochSchedCB']

# %% ../nbs/12_accel_sgd.ipynb 1
import torch
import fastcore.all as fc

from .datasets import *
from .conv import *
from .learner import *
from .activations import *
from .init import *

# %% ../nbs/12_accel_sgd.ipynb 39
class BaseSchedCB(Callback):
    def __init__(self, sched): fc.store_attr()

    def before_fit(self, learn):
        self.sched_instance = self.sched(learn.opt)

    def _step(self, learn):
        if learn.training:
            self.sched_instance.step()

# %% ../nbs/12_accel_sgd.ipynb 40
class BatchSchedCB(BaseSchedCB):
    def after_batch(self, learn):
        self._step(learn)

# %% ../nbs/12_accel_sgd.ipynb 41
class HasLearnCB(Callback):
    def before_fit(self, learn):
        self.learn = learn

    def after_fit(self, learn):
        self.learn = None

# %% ../nbs/12_accel_sgd.ipynb 42
class RecorderCB(Callback):
    def __init__(self, **d):
        self.d = d

    def before_fit(self, learn):
        self.recorded = {k: [] for k in self.d}
        self.pg = learn.opt.param_groups[0]

    def after_batch(self, learn):
        if learn.training:
            for k, v in self.d.items():
                self.recorded[k].append(v(self.pg))

    def plot(self):
        for k, vs in self.recorded.items():
            plt.plot(range(len(vs)), vs, label=k)
            plt.legend()
            plt.show()

# %% ../nbs/12_accel_sgd.ipynb 47
class EpochSchedCB(BaseSchedCB):
    def after_epoch(self, learn):
        self._step(learn)
