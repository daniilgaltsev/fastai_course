# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_datasets.ipynb.

# %% auto 0
__all__ = ['inplace', 'collate_dict', 'show_image', 'subplots', 'get_grid', 'show_images']

# %% ../nbs/05_datasets.ipynb 1
from itertools import zip_longest
import math
from operator import itemgetter

import fastcore.all as fc
import matplotlib.pyplot as plt
import numpy as np
import torch
from torch.utils.data import default_collate

# %% ../nbs/05_datasets.ipynb 32
def inplace(f):
    def _f(x):
        f(x)
        return x
    return _f

# %% ../nbs/05_datasets.ipynb 46
def collate_dict(ds):
    ig = itemgetter(*ds.features)
    def _f(x):
        return ig(default_collate(x))
    return _f

# %% ../nbs/05_datasets.ipynb 52
@fc.delegates(plt.Axes.imshow)
def show_image(im, ax=None, figsize=None, title=None, **kwargs):
    if isinstance(im, torch.Tensor):
        im = im.detach().cpu()
        if len(im.shape) == 3:
            im = im.permute(1, 2, 0)
    elif not isinstance(im, np.ndarray) and im is not None:
        im = np.array(im)
    if im is not None:
        if im.shape[-1] == 1:
            im = im[..., 0]
    if ax is None:
        _, ax = plt.subplots(figsize=figsize)

    if im is not None:
        ax.imshow(im, **kwargs)
    if title is not None:
        ax.set_title(title)
    ax.axis("off")

    return ax

# %% ../nbs/05_datasets.ipynb 57
@fc.delegates(plt.subplots)
def subplots(
    nrows: int = 1,  # Number of rows to create
    ncols: int = 1,  # Number of cols to create
    figsize: tuple = None,  # Size of the whole figure (width, height)
    imsize: int = 3,  # Size of eaxh image,
    suptitle: str = None,  # Title to use for the figure
    **kwargs
):  # fig and axs
    """A figure and subplots to display `nrows`x`ncols` images of size `imsize`."""
    if figsize is None:
        figsize = (ncols * imsize, nrows * imsize)
    fig, ax = plt.subplots(nrows, ncols, figsize=figsize, **kwargs)
    if suptitle is not None:
        fig.suptitle(suptitle)
    if nrows == ncols == 1:
        ax = np.array([ax])
    return fig, ax

# %% ../nbs/05_datasets.ipynb 60
@fc.delegates(subplots)
def get_grid(
    n: int,  # Number of axes
    nrows: int = None,  # Number of rows
    ncols: int = None,  # Number of cols
    title: str = None,  # Title of the figure
    weight: str = "bold",  # Title font weight
    size: int = 16,  # Title font size
    **kwargs
):  # fig and axs
    """Return a grid of at least `n` axes, `nrows`x`ncols`."""
    if nrows is None and ncols is None:
        nrows = int(math.sqrt(n))
    if nrows is None:
        nrows = math.ceil(n / ncols)
    if ncols is None:
        ncols = math.ceil(n / nrows)

    fig, ax = subplots(nrows, ncols, **kwargs)
    n = nrows * ncols
    for i in range(n):
        ax.flat[i].set_axis_off()
    if title is not None:
        fig.title(title, weight=weight, size=size)
    return fig, ax

# %% ../nbs/05_datasets.ipynb 62
@fc.delegates(subplots)
def show_images(
    ims: list,  # Images to display
    nrows: int = None,  # Number of rows to show
    ncols: int = None,  # Number of cols to show
    titles: list = None,  # Titles for each image
    **kwargs
):
    """Display `ims` in a grid `nrows`x`ncols` with `titles`."""
    _, ax = get_grid(len(ims), nrows, ncols, **kwargs)
    for img, title, a in zip_longest(ims, titles or [], ax.flat):
        show_image(img, ax=a, title=title)
