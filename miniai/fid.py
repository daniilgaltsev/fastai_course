# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/18_fid.ipynb.

# %% auto 0
__all__ = ['capture_preds', 'ImageEval']

# %% ../nbs/18_fid.ipynb 2
import pickle,gzip,math,os,time,shutil,torch,random,logging
import fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
from collections.abc import Mapping
from pathlib import Path
from operator import attrgetter,itemgetter
from functools import partial
from copy import copy
from contextlib import contextmanager

from diffusers import UNet2DModel
from fastcore.foundation import L
import torchvision.transforms.functional as TF,torch.nn.functional as F
from torch import tensor,nn,optim
from torch.utils.data import DataLoader,default_collate
from torch.nn import init
from torch.optim import lr_scheduler
from torcheval.metrics import MulticlassAccuracy
from datasets import load_dataset,load_dataset_builder

from .datasets import *
from .conv import *
from .learner import *
from .activations import *
from .init import *
from .sgd import *
from .resnet import *
from .augment import *
from .accel import *

# %% ../nbs/18_fid.ipynb 11
@fc.patch
def capture_preds(self: Learner, inputs=False, preds=True, targets=True, to_tensor=True):
    cp = CapturePreds()
    self.fit(1, train=False, cbs=[cp])
    result = ()
    if inputs:
        result += (cp.captured_inps,)
    if preds:
        result += (cp.captured_preds,)
    if targets:
        result += (cp.captured_targets,)
    del cp
    if to_tensor:
        result = list(map(torch.cat, result))
    return result
        

# %% ../nbs/18_fid.ipynb 31
def _calc_stats(feats):
    feats = feats.squeeze()
    return feats.mean(0), feats.T.cov()

# %% ../nbs/18_fid.ipynb 33
import scipy.linalg as linalg

# %% ../nbs/18_fid.ipynb 36
def _calc_fid(m1, c1, m2, c2):
    cc =tensor(linalg.sqrtm(c1 @ c2).real)
    return (
        ((m1 - m2) ** 2).sum() +
        c1.trace() + c2.trace() - 2 * cc.trace()  # (c1 + c2 - 2 * cc).trace()
    ).item()

# %% ../nbs/18_fid.ipynb 43
def _squared_mmd(x, y):
    x = x.squeeze()
    y = y.squeeze()
    def k(_x, _y):
        d = _x.shape[-1]
        return (1 / d * _x @ _y.T + 1) ** 3
    m = x.shape[0]
    n = y.shape[0]
    k_xx = k(x, x)
    k_yy = k(y, y)
    k_xy = k(x, y)
    return (
        ((1 / m / (m-1)) * (k_xx.sum() - k_xx.trace())) +
        ((1 / n / (n-1)) * (k_yy.sum() - k_yy.trace())) -
        ((2 / m / n) * k_xy.sum())
    ).item()

# %% ../nbs/18_fid.ipynb 46
def _calc_kid(x, y, maxs=50):
    return _squared_mmd(x, y)

# %% ../nbs/18_fid.ipynb 52
class ImageEval:
    def __init__(self, model, dls, cbs=None):
        self.learn = TrainLearner(model, dls, cbs=cbs, opt_func=None, loss_func=fc.noop)
        self.feats = self._get_feats()
        self.stats = _calc_stats(self.feats)

    def _get_feats(self):
        return to_cpu(self.learn.capture_preds()[0])
            
    def get_feats(self, samp):
        self.learn.dls = DataLoaders([], [(samp, torch.empty(1))])
        return self._get_feats()

    def fid(self, samp):
        return _calc_fid(*self.stats, *_calc_stats(self.get_feats(samp)))

    def kid(self, samp):
        return _calc_kid(self.feats, self.get_feats(samp))
